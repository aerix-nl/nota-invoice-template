'use strict';
var base, bower, dependencies, onDependenciesLoaded, onError, root;

(base = Function.prototype).bind || (base.bind = function(_this) {
  return (function(_this) {
    return function() {
      return _this.apply(_this, arguments);
    };
  })(this);
});

root = './../../';

bower = 'bower_components/';

requirejs.config({
  enfordeDefine: true,
  paths: {
    'jquery': root + bower + 'jquery/dist/jquery',
    'underscore': root + bower + 'underscore/underscore',
    'underscore.string': root + bower + 'underscore.string/lib/underscore.string',
    'handlebars': root + bower + 'handlebars/handlebars.amd',
    'material-design-lite': root + bower + 'material-design-lite/material.min',
    'moment': root + bower + 'momentjs/moment',
    'moment_nl': root + bower + 'momentjs/locale/nl',
    'i18next': root + bower + 'i18next/i18next.amd.withJQuery',
    'tv4': root + bower + 'tv4/tv4',
    'json': root + bower + 'requirejs-plugins/src/json',
    'text': root + bower + 'requirejs-text/text',
    'requirejs': root + bower + 'requirejs/require',
    'template-controller': './template-controller',
    'template-model': './template-model',
    'schema': root + 'json/schema.json',
    'translation_nl': root + 'json/locales/nl.json',
    'translation_en': root + 'json/locales/en.json',
    'preview-data': root + 'json/preview.json',
    'nota': '/nota/lib/client'
  }
});

dependencies = ['template-controller'];

if (window._phantom) {
  dependencies.push('nota');
}

onDependenciesLoaded = function(TemplateController, Nota) {
  var error, error1, templateController;
  requirejs.onError = function(err) {
    throw err;
  };
  if (Nota != null) {
    Nota.trigger('template:init');
  }
  try {
    templateController = new TemplateController(onError, Nota);
  } catch (error1) {
    error = error1;
    onError(error);
    if (Nota != null) {
      if (Nota != null) {
        Nota.logError(error, "An error occured during template initialization.");
      }
    } else {
      throw error;
    }
  }
  if (Nota != null) {
    Nota.trigger('template:loaded');
  }
  window.template = templateController;
  return templateController;
};

onError = function(error, contextMessage) {
  var errorList, errorText, li, manual, type;
  if (window.errorTemplate == null) {
    window.errorTemplate = document.getElementById('template-error').innerHTML;
    document.body.innerHTML = window.errorTemplate;
  }
  if (window.errorListItem == null) {
    window.errorListItem = document.querySelectorAll("div.error-container ul li.error")[0];
    document.querySelectorAll("div.error-container ul")[0].innerHTML = "";
  }
  errorList = document.querySelectorAll("div.error-container ul")[0];
  li = errorListItem.cloneNode();
  if (contextMessage != null) {
    li.innerHTML = contextMessage + ' ' + error;
  } else if (error.requireType != null) {
    type = document.createElement('strong');
    type.innerHTML = "Module require error (" + error.requireType + ").";
    errorText = document.createTextNode(error.message);
    li.appendChild(type);
    li.appendChild(errorText);
  } else {
    li.innerHTML = error;
  }
  errorList.appendChild(li);
  if ((error.requireModules != null) === 'nota') {
    manual = document.querySelectorAll("div.manual-container")[0];
    manual.style.display = 'block';
  }
  if (error.requireModules != null) {
    throw error;
  }
};

requirejs.onError = onError;

define(dependencies, onDependenciesLoaded, onError);

//# sourceMappingURL=data:application/json;base64,
