'use strict';
var base, bower, dependencies, onDependenciesLoaded, onError, root, withNota, withoutNota;

(base = Function.prototype).bind || (base.bind = function(_this) {
  return (function(_this) {
    return function() {
      return _this.apply(_this, arguments);
    };
  })(this);
});

root = './../../';

bower = 'bower_components/';

requirejs.config({
  enfordeDefine: true,
  paths: {
    'jquery': root + bower + 'jquery/dist/jquery',
    'underscore': root + bower + 'underscore/underscore',
    'underscore.string': root + bower + 'underscore.string/lib/underscore.string',
    'handlebars': root + bower + 'handlebars/handlebars.amd',
    'material-design-lite': root + bower + 'material-design-lite/material.min',
    'moment': root + bower + 'momentjs/moment',
    'moment_nl': root + bower + 'momentjs/locale/nl',
    'i18next': root + bower + 'i18next/i18next.amd.withJQuery',
    'tv4': root + bower + 'tv4/tv4',
    'json': root + bower + 'requirejs-plugins/src/json',
    'text': root + bower + 'requirejs-text/text',
    'requirejs': root + bower + 'requirejs/require',
    'template-controller': './template-controller',
    'template-model': './template-model',
    'schema': root + 'json/schema.json',
    'translation_nl': root + 'json/locales/nl.json',
    'translation_en': root + 'json/locales/en.json',
    'preview-data': root + 'json/preview.json',
    'nota': '/nota/lib/client'
  }
});

dependencies = ['template-controller'];

onDependenciesLoaded = function(TemplateController) {
  var error, error1, templateController;
  requirejs.onError = function(err) {
    throw err;
  };
  if (typeof Nota !== "undefined" && Nota !== null) {
    Nota.trigger('template:init');
  }
  try {
    if (typeof Nota !== "undefined" && Nota !== null) {
      templateController = new TemplateController(onError, Nota);
    } else {
      templateController = new TemplateController(onError);
    }
  } catch (error1) {
    error = error1;
    onError(error);
    if (typeof Nota !== "undefined" && Nota !== null) {
      if (typeof Nota !== "undefined" && Nota !== null) {
        Nota.logError(error, "An error occured during template initialization.");
      }
    } else {
      throw error;
    }
  }
  if (typeof Nota !== "undefined" && Nota !== null) {
    Nota.trigger('template:loaded');
  }
  window.template = templateController;
  return templateController;
};

onError = function(error, contextMessage) {
  var errorList, errorText, li, manual, type;
  if (window.errorTemplate == null) {
    window.errorTemplate = document.getElementById('template-error').innerHTML;
    document.body.innerHTML = window.errorTemplate;
  }
  if (window.errorListItem == null) {
    window.errorListItem = document.querySelectorAll("div.error-container ul li.error")[0];
    document.querySelectorAll("div.error-container ul")[0].innerHTML = "";
  }
  errorList = document.querySelectorAll("div.error-container ul")[0];
  li = errorListItem.cloneNode();
  if (contextMessage != null) {
    li.innerHTML = contextMessage + ' ' + error;
  } else if (error.requireType != null) {
    type = document.createElement('strong');
    type.innerHTML = "Module require error (" + error.requireType + ").";
    errorText = document.createTextNode(error.message);
    li.appendChild(type);
    li.appendChild(errorText);
  } else {
    li.innerHTML = error;
  }
  errorList.appendChild(li);
  if ((error.requireModules != null) === 'nota') {
    manual = document.querySelectorAll("div.manual-container")[0];
    manual.style.display = 'block';
  }
  if (error.requireModules != null) {
    throw error;
  }
};

withNota = function(Nota) {
  return require(dependencies, onDependenciesLoaded, onError);
};

withoutNota = function(error) {
  if (window._phantom) {
    onError(error);
  }
  requirejs.undef('nota');
  return require(dependencies, onDependenciesLoaded, onError);
};

requirejs.onError = onError;

require(['nota'], withNota, withoutNota);

//# sourceMappingURL=data:application/json;base64,
